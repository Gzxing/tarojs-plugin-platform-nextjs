const path = require('path')
const withTM = require('next-transpile-modules')(['@tarojs/taro-h5'])

/** @type {import('next').NextConfig} */
const nextConfig = {
    env: {
    <%_ Object.keys(env).forEach(function (key){ _%>
        <%_ if (key !== 'NODE_ENV') { _%>
        <%- key %>: <%- env[key] %>,
        <%_ } _%>
    <%_ }) _%>
    },
    sassOptions: {
        <%_ if (prependData) { _%>
        prependData: <%- prependData %>,
        <%_ } _%>
        <%_ if (includePaths) { _%>
        includePaths: <%- includePaths %>
        <%_ } _%>
    },
    webpack(config, {webpack}) {
        for (let i = 0; i < config.plugins.length; i++) {
            const plugin = config.plugins[i]
            if (plugin.constructor.name === 'DefinePlugin') {
                config.plugins[i] = new webpack.DefinePlugin({
                    ENABLE_INNER_HTML: JSON.stringify(true),
                    ENABLE_ADJACENT_HTML: JSON.stringify(true),
                    ENABLE_SIZE_APIS: JSON.stringify(true),
                    ENABLE_TEMPLATE_CONTENT: JSON.stringify(true),
                    ENABLE_MUTATION_OBSERVER: JSON.stringify(true),
                    ENABLE_CLONE_NODE: JSON.stringify(true),
                    ENABLE_CONTAINS: JSON.stringify(true),
                    ...plugin.definitions
                })
            }
        }

        const targetPath = path.resolve(__dirname, './@tarojs/taro/utils/index.ts')
        config.plugins.push(
            new webpack.NormalModuleReplacementPlugin(
                /@tarojs\/taro-h5\/src\/api\/utils\/index.ts/,
                targetPath
            )
        )
        return config
    }
}
  
module.exports = withTM(nextConfig)
